package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
    static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
    // Disable syntax error recovery
    protected void recoverFromError(Symbol token, TokenStream in) {
        throw new SyntaxError("Cannot recover from the syntax error");
    }

  public static class Terminals {
    public static final short EOF = 0;
    public static final short MUL = 1;
    public static final short IN = 2;
    public static final short END = 3;
    public static final short ID = 4;
    public static final short LET = 5;
    public static final short NUMERAL = 6;
    public static final short ASSIGN = 7;

    public static final String[] NAMES = {
        "EOF",
        "MUL",
        "IN",
        "END",
        "ID",
        "LET",
        "NUMERAL",
        "ASSIGN",
    };
  }

  private final Action[] actions = {
    Action.RETURN, // [0] id =  ID (default action: return symbol 1)
    Action.RETURN, // [1] numeral =  NUMERAL (default action: return symbol 1)
    Action.RETURN, // [2] factor =  numeral (default action: return symbol 1)
    Action.RETURN, // [3] program =  exp (default action: return symbol 1)
    Action.RETURN, // [4] exp =  factor (default action: return symbol 1)
    new Action() { // [5] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol program = _symbols[offset + 1];
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    RETURN3, // [6] exp =  exp MUL factor (default action: return symbol 3)
    RETURN7, // [7] let =  LET id ASSIGN exp IN exp END (default action: return symbol 7)
  };

      static final Action RETURN3 = new Action() {
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return _symbols[offset + 3];
        }
      };
      static final Action RETURN7 = new Action() {
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return _symbols[offset + 7];
        }
      };
  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9oDaxjImq0CHU$QUP1WyW1$04D5IKa97VHyG0e#W8ucCqv7Iy6$yaXWEMlPExR3E4Xpndj" +
    "NaYslR4blIZHGgcEDDTHS4r#PIcFnOwxQaZBpI1ED$Bkc$jky3lkTifYnG7VZM$EeEt6TnE" +
    "hJKi$KDkitclyw4FyqZnkPbdtvnAMpHls7ELb3ZUWhT3Rbl2H7RLgTrhYjsHd4p8ntckt5W" +
    "uuPbUx6#tMZEdJWMsRzDhGEnJltH$NcEqZtwxdc6$joTcMF2b#1SZY7IxY2QxY1ExY71rZ1" +
    "8pp1CwpX1LutDefbmKqBUzosNlz5U7PXFLtKUwnl6#jS$xSmSyTPEqxRCKd7H1qpJRZQdpF" +
    "$1MME718=");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
